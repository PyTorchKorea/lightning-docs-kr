trigger:
  # this shall process all these workflows in sequence even several PRs are merged shortly
  batch: "true"
  # publish notebooks only from default/main branch
  branches:
    include: [ main ]

# no run on PR as this is exclusive for publishing notebooks
pr: none

jobs:

  - job: sync_pub
    pool:
      vmImage: 'Ubuntu-20.04'
    variables:
      ACCELERATOR: CPU,GPU
      PUB_BRANCH: publication
      COMMIT_MSG: $(echo "$(Build.SourceVersionMessage)" | head -n 1)
      COMMIT_HASH: "$(Build.SourceVersion)"
    steps:
    - bash: |
        git config --global user.email "pipelines@azure.com"
        git config --global user.name "Azure Pipelines"
        printf "commit hash:\n $(COMMIT_HASH)\n"
        printf "commit message:\n $(COMMIT_MSG)\n"
      displayName: 'Set Git user'
    - bash: |
        set -e
        git fetch --all
        echo $(PUB_BRANCH)
        git ls-remote --heads origin ${PUB_BRANCH} | grep ${PUB_BRANCH} >/dev/null
        if [ "$?" == "1" ] ; then echo "Branch doesn't exist"; exit; fi
      displayName: 'Git branch check'

    - bash: pip install -r .actions/requires.txt
      displayName: 'Install dependencies'
    - bash: |
        current_branch=$(cut -d '/' -f3- <<< $(Build.SourceBranch))
        printf "$current_branch\n"
        bash .actions/git-diff-sync.sh $current_branch $(PUB_BRANCH)
      displayName: 'Compare changes & sync'

    - bash: |
        notebooks=$(python .actions/assistant.py generate-matrix changed-folders.txt)
        printf "Changed notebooks: $notebooks\n"
        echo "##vso[task.setVariable variable=dirs;isOutput=true]$notebooks"
      name: mtrx
      displayName: 'Changed matrix'

    - bash: |
        # remove notebooks which have moved
        while IFS= read -r line; do
            git rm .notebooks/$line.ipynb
            git rm .notebooks/$line.yaml
        done <<< $(cat dropped-folders.txt)
        git status
        git commit -m "prune: $(COMMIT_HASH)"
      condition: gt(variables['dropped.folders'], 0)
      displayName: 'Prune notebook'

    - bash: |
        git status
        git push https://$(PAT_GHOST)@github.com/Lightning-AI/tutorials.git $(PUB_BRANCH)
      displayName: 'Finish push'

  - job: papermill
    dependsOn: sync_pub
    strategy:
      # generated matrix with changed notebooks, include fields: "notebook", "agent-pool" and "docker-image"
      matrix: $[ dependencies.sync_pub.outputs['mtrx.dirs'] ]
      # Maximum number of jobs running in parallel, use 1 to run in sequence and reduce collisions
      maxParallel: "1"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"
    # how long to run the job before automatically cancelling
    # When 0 is specified, the maximum limit is used:
    # - For 360 minutes (6 hours) on Microsoft-hosted agents with a public project and public repository
    # - For 60 minutes on Microsoft-hosted agents with a private project or private repository
    timeoutInMinutes: "180"

    pool: "$(agent-pool)"
    # this need to have installed docker in the base machine/image...
    container:
      image: "$(docker-image)"
      options: "--gpus=all --shm-size=32g -v /usr/bin/docker:/tmp/docker:ro"

    variables:
      ACCELERATOR: CPU,GPU
      PUB_BRANCH: publication
      PATH_DATASETS: "$(Build.Repository.LocalPath)/.datasets"
      COMMIT_MSG: $(echo "$(Build.SourceVersionMessage)" | head -n 1)
      COMMIT_HASH: "$(Build.SourceVersion)"
      DEVICES: $( python -c 'print("$(Agent.Name)".split("_")[-1])' )

    condition: ne(dependencies.sync_pub.outputs['mtrx.dirs'], '')

    steps:
    - bash: |
        echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
        echo "##vso[task.setvariable variable=CONTAINER_ID]$(head -1 /proc/self/cgroup|cut -d/ -f3)"
      displayName: 'Set environment variables'

    - bash: |
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        echo $CUDA_VISIBLE_DEVICES
        echo $CONTAINER_ID
        python --version
        pip list
      displayName: 'Image info & NVIDIA'

    - script: |
        /tmp/docker exec -t -u 0 $CONTAINER_ID \
        sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - bash: |
        git config --global user.email "pipelines@azure.com"
        git config --global user.name "Azure Pipelines"
        printf "commit hash:\n $(COMMIT_HASH)\n"
        printf "commit message:\n $(COMMIT_MSG)\n"
      displayName: 'Set Git user'
    - bash: |
        set -e
        git fetch --all
        echo $(PUB_BRANCH)
        git ls-remote --heads origin ${PUB_BRANCH} | grep ${PUB_BRANCH} >/dev/null
        if [ "$?" == "1" ] ; then echo "Branch doesn't exist"; exit; fi
        git checkout $(PUB_BRANCH)
        git show-ref $(PUB_BRANCH)
        git pull
      displayName: 'Git check & switch branch'

    - bash: |
        set -e
        sudo apt-get update -q --fix-missing
        sudo apt install -y tree ffmpeg
        #pip install --upgrade pip
        #pip --version
        pip install -r requirements.txt -r _requirements/data.txt
        pip list
      displayName: 'Install dependencies'

    - bash: |
        set -e
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu > 0, f'GPU: {mgpu}'"
        python -m papermill --version
      displayName: 'Sanity check'

    - bash: python .actions/assistant.py convert-ipynb $(notebook)
      displayName: 'Generate notebook'

    - bash: |
        set -e
        mkdir $(PATH_DATASETS)
        python .actions/assistant.py bash-render $(notebook)
        cat .actions/_ipynb-render.sh
        bash .actions/_ipynb-render.sh
        git status
        git commit -m "publish [GPU]: $(notebook)"
      env:
        KAGGLE_USERNAME: $(KAGGLE_USERNAME)
        KAGGLE_KEY: $(KAGGLE_KEY)
      displayName: 'Render notebook'

    - bash: |
        git status
        git show-ref $(PUB_BRANCH)
        git push https://$(PAT_GHOST)@github.com/Lightning-AI/tutorials.git $(PUB_BRANCH)
      displayName: 'Finish push'
